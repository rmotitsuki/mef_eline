<template>
  <k-toolbar-item icon="link" tooltip="Mef-Eline">
    <div class="scroll">
      <k-accordion>
        <k-accordion-item title="Request E-Line Circuit">
           <k-input id="name-input" :value.sync="circuit_name"
                    title="Circuit Name:" tooltip="Circuit name"
                    placeholder="Circuit Name" icon="pencil"></k-input>

           <k-input-auto id="endpoint-a-input" :value.sync="endpoint_a"
                    title="Endpoint A:"
                    tooltip="Endpoint A (format: dpid:port_number)"
                    placeholder="Endpoint A" icon="arrow-right"
                    :candidates="dpids" 
                    @focus="fetch_dpids"
                    @blur="onblur_dpid"
					          v-if="compexists"
                    ></k-input-auto>
            <k-input id="endpoint-a-input" :value.sync="endpoint_a"
                    title="Endpoint A:"
                    tooltip="Endpoint A (format: dpid:port_number)"
                    placeholder="Endpoint A" icon="arrow-right"
					          v-else
                    ></k-input> 
            <div class="k-input mef-field-label" :value.sync="endpoint_name_a"
                    >{{endpoint_name_a}}</div> 
            <k-input id="endpoint-a-tag-type" :value.sync="tag_type_a"
                    v-if=false
                    title="Tag Type A:"
                    tooltip="Enter with a Tag Type"
                    placeholder="tag type" icon="arrow-right"></k-input>

            <k-input id="endpoint-a-tag-value" :value.sync="tag_value_a"
                    title="Tag Value A:"
                    tooltip="Enter VLAN A value"
                    placeholder="VLAN A" icon="arrow-right"></k-input>

            <k-input-auto id="endpoint-z-input" :value.sync="endpoint_z"
                    title="Endpoint Z:"
                    tooltip="Endpoint Z (format: dpid:port_number)"
                    placeholder="Endpoint Z" icon="arrow-left"
                    :candidates="dpids"
                    @focus="fetch_dpids"
                    @blur="onblur_dpid"
					          v-if="compexists"></k-input-auto>
            <div class="k-input mef-field-label" :value.sync="endpoint_name_z"
                    >{{endpoint_name_z}}</div> 
           <k-input id="endpoint-z-input" :value.sync="endpoint_z"
                    title="Endpoint Z:"
                    tooltip="Endpoint Z (format: dpid:port_number)"
                    placeholder="Endpoint Z" icon="arrow-left"
                    v-else
                    ></k-input>

           <k-input id="endpoint-z-tag_type" :value.sync="tag_type_z"
                    v-if=false
                    title="Tag Type Z:"
                    tooltip="Enter with a Tag Type Z"
                    placeholder="tag type" icon="arrow-right"></k-input>

           <k-input id="endpoint-z-tag-value" :value.sync="tag_value_z"
                    title="Tag Value Z:"
                    tooltip="Enter VLAN Z value"
                    placeholder="VLAN Z" icon="arrow-right"></k-input>

           <k-input id="service-level-input" :value.sync="service_level"
                    title="Service level:"
                    tooltip="Enter the service level (0-7)"
                    placeholder="service level value" icon="arrow-right"></k-input>

            <k-input id="sb-priority-input" :value.sync="sb_priority"
                    title="Southbound priority:"
                    tooltip="Enter the southbound priority"
                    placeholder="southbound priority" icon="arrow-right"></k-input>

           <k-dropdown icon="arrow-right" title="QoS Egress Queue" :options="get_queue_ids"
            :value.sync="queue_id"></k-dropdown>
        </k-accordion-item>
        <k-accordion-item title="Telemetry">
          <div style="">
            <k-checkbox icon="poll" v-on:change.native="change_telemetry" class="round"></k-checkbox>
            <span class="mef-field-label">
              <span v-if="has_telemetry">enabled</span>
              <span v-else>disabled</span>
            </span>
          </div>
        </k-accordion-item>
        <span v-for="constraint in ['primary_constraints', 'secondary_constraints']">
            <k-accordion-item :title="constraint_titles[constraint]"
             v-if="false">

                <k-select :title="constraint_titles.undesired_links" :options="get_link_options()"
                :value.sync ="form_constraints[constraint].undesired_links"></k-select>
                
                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :title="constraint_titles.spf_attribute" :options="get_spf_attribute_options()"
                    :value.sync ="form_constraints[constraint].spf_attribute"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <p><!-- blank space --></p>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-field">
                    <label class="metric-label">{{constraint_titles['spf_max_path_cost']}}</label> 
                    <k-input 
                    title="Southbound priority:"
                    :action="function(val) {form_constraints[constraint].spf_max_path_cost = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-field">
                    <label class="metric-label">{{constraint_titles['minimum_flexible_hits']}}</label> 
                    <k-input 
                    :title="constraint_titles['minimum_flexible_hits']"
                    :action="function(val) {form_constraints[constraint].minimum_flexible_hits = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                    <div class="metric-dropdown">
                        <k-dropdown :options="metric_options" 
                        :title="constraint_titles['bandwidth']"
                        :value.sync="is_flexible[constraint].bandwidth"></k-dropdown>
                    </div>
                    <div class="metric-field">
                        <k-input icon="arrow-right" :action="function(val) {metrics[constraint].bandwidth = parseInt(val)}"></k-input>
                    </div>
                </div>

                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :options="metric_options" 
                    :title="constraint_titles['utilization']"
                    :value.sync="is_flexible[constraint].utilization"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <k-input icon="arrow-right" :action="function(val) {metrics[constraint].utilization = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :options="metric_options" 
                    :title="constraint_titles['priority']"
                    :value.sync="is_flexible[constraint].priority"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <k-input icon="arrow-right" :action="function(val) {metrics[constraint].priority = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :options="metric_options" 
                    :title="constraint_titles['delay']"
                    :value.sync="is_flexible[constraint].delay"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <k-input icon="arrow-right" :action="function(val) {metrics[constraint].delay = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :options="metric_options"
                    :title="constraint_titles['reliability']"
                    :value.sync="is_flexible[constraint].reliability"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <k-input icon="arrow-right" :action="function(val) {metrics[constraint].reliability = parseInt(val)}"></k-input>
                  </div>
                </div>

                <div class="metric">
                  <div class="metric-dropdown">
                    <k-dropdown :options="metric_options" 
                    :title="constraint_titles['ownership']"
                    :value.sync="is_flexible[constraint].ownership"></k-dropdown>
                  </div>
                  <div class="metric-field">
                    <k-input icon="arrow-right" :action="function(val) {metrics[constraint].ownership = val}"></k-input>
                  </div>
                </div>
            </k-accordion-item>
        </span>
        <k-button tooltip="Request Circuit" title="Request Circuit"
        icon="gear" :on_click="request_circuit">
        </k-button>
        <k-accordion-item title="List EVCs">
            <k-button tooltip="List installed EVC" title="List installed EVC"
                     icon="plug" :on_click="viewPanel">
            </k-button>
        </k-accordion-item>
      </k-accordion>
    </div>
  </k-toolbar-item>
</template>
<script>
module.exports = {
  data(){
    return {
        circuit_name: "",
        endpoint_a: "",
        endpoint_name_a: "Endpoint name:",
        tag_type_a: "1", // VLAN
        tag_value_a: "",
        endpoint_z: "",
        endpoint_name_z: "Endpoint name:",
        tag_type_z: "1", // VLAN
        tag_value_z: "",
        service_level: "",
        sb_priority: "",
        queue_id: "",
        dpids: [""],
        hasAutoComplete:false,

        constraint_titles: {},
        constraints: {},
        form_constraints: {},
        metrics: {
          primary_constraints: {},
          secondary_constraints: {}
        },
        is_flexible: {
          primary_constraints: {
            bandwidth: false,
            reliability: false,
            delay: false,
            utilization: false,
            priority: false,
            ownership: false
          },
          secondary_constraints: {
            bandwidth: false,
            reliability: false,
            delay: false,
            utilization: false,
            priority: false,
            ownership: false
          }
        },
        has_telemetry: false,
    }
  },
  computed: {
    metric_options(){
      var metric_options = [];
      metric_options.push({value: false, description: 'Mandatory', selected: true});
      metric_options.push({value: true, description: 'Flexible'});

      return metric_options;
    },
    get_queue_ids(){
      let values = Array(8).fill().map((_, i) => i)
      var queue_ids = [{value: "", description: "none", selected: true}]
      values.forEach(
          x => queue_ids.push({value:x, description:String(x)})
      )
      return queue_ids;
    },
  },
  methods: {
    get_spf_attribute_options: function() {
      /**
       * Method to build option items for spf attribute.
       */
      let _result = [
        {value: "hop", description: "hop", selected: true},
        {value: "delay", description: "delay"},
        {value: "priority", description: "priority"},
      ];
      return _result;
    },    
    get_link_options: function(){
      /**
       * Build option items for constraint (desired/undesired) link.
       */
      let _result = [];
      $.each(this.link_options, function(key, item){
        let _item = {};
        _item.value = item.value;
        _item.description = item.description;
        _result.push(_item);
      });
      return _result;
    },
    init_path_constraints: function() {
      /**
      * Build path constraint data for exibition 
      * (primary and secondary constraints paths).
      */
      this.form_constraints['primary_constraints'] = {};
      this.form_constraints['secondary_constraints'] = {};

      this.constraint_titles = {
        'primary_constraints': 'Primary Constraints',
        'secondary_constraints': 'Secondary Constraints',
        'undesired_links': 'Undesired links',
        'spf_attribute': 'SPF attribute',
        'spf_max_path_cost': 'SPF max path cost',
        'minimum_flexible_hits': 'Min. flexible hits',
        'mandatory_metrics': 'Mandatory metrics',
        'bandwidth': 'Bandwidth',
        'utilization': 'Utilization',
        'priority': 'Priority',
        'delay': 'Delay',
        'reliability': 'Reliability',
        'ownership': 'Ownership',
      };

      let _constraint = {};
      _constraint = {
        'undesired_links': '',
        'spf_attribute': '',
        'spf_max_path_cost': '',
        'minimum_flexible_hits': '',
      };

      _constraint.mandatory_metrics = {
        'bandwidth': '', 'utilization': '', 'priority': '',
        'delay': '', 'reliability': '', 'ownership': '',
      };
    
      _constraint.flexible_metrics = {
        'bandwidth': '', 'utilization': '', 'priority': '',
        'delay': '', 'reliability': '', 'ownership': '',
      };

      this.constraint = {
        primary_constraints: _constraint,
        secondary_constraints: _constraint
      };
    },
    viewPanel() {
        var _this = this;
        // Clear panel
        this.hideInfoPanel();
        // Wait 50ms to clear the panel.
        setTimeout(function(){
            _this.showInfoPanel();
        }, 50);
    },
    hideInfoPanel() {
        this.$kytos.$emit("hideInfoPanel");
    },
    showInfoPanel() {
        let listConnections = {
            component: 'kytos-mef_eline-k-info-panel-list_connections',
            content: {},
            icon: "desktop",
            title: "View Connections",
            subtitle: "by kytos/mef_eline"
        };
        this.$kytos.$emit("showInfoPanel", listConnections);
    },
    set_default_values() {
        this.circuit_name = "";
        this.endpoint_a = "";
        this.endpoint_name_a = "Endpoint name:";
        this.tag_type_a = "1",
        this.tag_value_a = "";
        this.endpoint_z = "";
        this.endpoint_name_z = "Endpoint name:";
        this.tag_type_z = "1",
        this.tag_value_z = "";
        this.service_level = "";
        this.sb_priority = "";
        this.queue_id = "";
    },
    post_success(data) {
        let notification = {
            icon: 'gear',
            title: 'Circuit Created',
            description: 'Circuit with id ' + data.circuit_id + ' was created.'
        }
    
        this.$kytos.$emit("setNotification" , notification);
        // Clear fields if the POST is a success
        this.set_default_values();
    },
    post_error(data) {
        let notification = {
            icon: 'gear',
            title: 'Circuit Not Created (' + data.status + '):',
            description: data.responseJSON.description
        }
    
        this.$kytos.$emit("setNotification" , notification);
    },
    request_circuit () {
        var _this = this;
        var request = {
            "name" : this.circuit_name,
            "dynamic_backup_path": true,
            "enabled": true,
            "uni_a": {"interface_id": this.endpoint_a},
            "uni_z": {"interface_id": this.endpoint_z}
        }
        
        if (this.tag_type_a != "" && this.tag_value_a != "") {
            request.uni_a['tag'] = {tag_type: parseInt(this.tag_type_a),
                                    value: parseInt(this.tag_value_a)}
        }
        if (this.tag_type_z != "" && this.tag_value_z != "") {
            request.uni_z['tag'] = {tag_type: parseInt(this.tag_type_z),
                                    value: parseInt(this.tag_value_z)}
        }
        if (this.service_level !== undefined && this.service_level !== "") {
            request.service_level = parseInt(this.service_level)
        }
        if (this.sb_priority !== undefined && this.sb_priority !== "") {
            request.sb_priority = parseInt(this.sb_priority)
        }
        if (this.queue_id !== undefined && this.queue_id !== "") {
            request.queue_id = parseInt(this.queue_id)
        }

        ['primary_constraints', 'secondary_constraints'].forEach(_type => {
          request[_type] = {};
          request[_type].flexible_metrics = {};
          request[_type].mandatory_metrics = {};

          // mandatory and flexible metrics
          ['bandwidth', 'utilization', 'priority', 'delay', 'reliability', 'ownership'].forEach(_m => {
            if (_this.is_flexible[_type][_m]) {
              request[_type].flexible_metrics[_m] = _this.metrics[_type][_m];
            } else {
              request[_type].mandatory_metrics[_m] = _this.metrics[_type][_m];
            }
          });

          // Dropdown forms
          if(this.form_constraints[_type].undesired_links) {
            request[_type].undesired_links = this.form_constraints[_type].undesired_links.filter(item => typeof(item) == "string");
          }
          if(this.form_constraints[_type].spf_attribute) {
            request[_type].spf_attribute = this.form_constraints[_type].spf_attribute;
          }

          // Input forms
          if(this.form_constraints[_type].spf_max_path_cost) {
            request[_type].spf_max_path_cost = parseInt(this.form_constraints[_type].spf_max_path_cost);
          }
          if(this.form_constraints[_type].minimum_flexible_hits) {
            request[_type].minimum_flexible_hits = parseInt(this.form_constraints[_type].minimum_flexible_hits);
          }
          request['metadata'] = {};
          if(this.has_telemetry !== undefined) {
            request['metadata']['telemetry'] = this.has_telemetry;
          }
        });
        
        let circuit_request = $.ajax({
                                url: this.$kytos_server_api + "kytos/mef_eline/v2/evc/",
                                type:"POST",
                                data: JSON.stringify(request),
                                dataType: "json",
                                contentType: "application/json; charset=utf-8"
                            });
                    
        circuit_request.done(this.post_success);
        circuit_request.fail(this.post_error);
    },
    fetch_dpids: function() {
        var self = this // create a closure to access component in the callback below
        dataUrl = "/api/kytos/topology/v3/interfaces"
        // Autocomplete usage example.
        fetch(dataUrl).then(response => response.json())
                    .then(data => {
                        dpids = []
                        for ( const [key,value] of Object.entries( data.interfaces ) ) {
                            let item = key;
                            if(value.name) {
                                item = value.name + " - " + item;
                            }
                            dpids.push(item);
                        }
                        self.dpids = dpids;
                    });
    },
    load_topology: function() {
      var _this = this;

      $.ajax({
        async: true,
        dataType: "json",
        url: this.$kytos_server_api + "kytos/topology/v3",

        success: function(data) {
          let _link = data['topology']['links']
          _this.link_options = [];

          $.each(_link, function(key, value){
            if (value.metadata.link_name !== undefined && value.metadata.link_name.length !== 0){
              _this.link_options.push({value:value.id, description:value.metadata.link_name})
            } else {
              _this.link_options.push({value:value.id, description:value.id});
            }
          });
        }
      });
    },
    onblur_dpid: function() {
        /**
        * Update dpid values on event onblur triggered in dpids fields.
        * It split the value selected from autocomplete list.
        * It is expected the value as "NAME - DPID".
        **/
        let dpid_a = this.endpoint_a;
        if(dpid_a.lastIndexOf(' ') > 0) {
            let splitted_dpid = dpid_a.split(' ');
            this.endpoint_name_a = splitted_dpid[0];
            this.endpoint_a = splitted_dpid[2];
        }
        
        let dpid_z = this.endpoint_z;
        if(dpid_z.lastIndexOf(' ') > 0) {
            let splitted_dpid = dpid_z.split(' ');
            this.endpoint_name_z = splitted_dpid[0];
            this.endpoint_z = splitted_dpid[2];
        }
    },
    change_telemetry: function() {
      this.has_telemetry = !this.has_telemetry;
    }
  },
  mounted() { // when the Vue app is booted up, this is run automatically.
    this.fetch_dpids();
    this.load_topology();
    this.init_path_constraints();
    compexists = this.$root.$options.components['k-input-auto'] != null;
  },
  created() {
    compexists = this.$root.$options.components['k-input-auto'] != null;
  }
}
</script>
<style>
  .scroll {overflow-y: auto; height:calc(100vh - 60px);}
  .mef-field-label {
    padding-left: 2.3em;
    color: #737373;
    height: 1.1em;
    padding-top: 0.4em;
  }
  #endpoint-a-input .autocomplete-result-list,
  #endpoint-z-input .autocomplete-result-list {
    width: 100% !important;
    outline: 0;
    border: 1px #515151 solid;
    border-radius: 3px;
  }
  .autocomplete-result-list li {
    white-space: nowrap;
  }
  .metric {width:100%; overflow: hidden; display:flex;flex-wrap: wrap;}
  .metric-label {
    width:50%;
    color: #b3b3b3;
    font-size: .78em;
  }
  .metric-dropdown {width:100%;}
  .metric-dropdown .k-dropdown {height: 20px; width:100%; display:flex;flex-wrap: wrap;}
  .metric-dropdown .k-dropdown .k-dropdown__title {width:35%;}
  .metric-dropdown .k-dropdown .k-dropdown__select {width:60%;}
  .metric-field {width:100%; display:flex; }
  .metric-field label {width:60%; }
  .metric-field label ~.k-input-wrap {width:40%; }
  .metric-field label ~.k-input-wrap input {width:50px; }
  

  .metric-field  .k-input-wrap:hover  * {
    background: #515151;
  }
  .metric-field  .k-input-wrap:hover input  * {
    background: #515151;
  }
  
</style>
